#include "com_iron_grayprocess_ImageProc.h"
#include "HandReco/SkinTester.h"
#include "HandReco/FingerTest.h"
#include <jni.h>
#include <android/log.h>
#include <opencv2/core/core.hpp>
#include <string>
#include <vector>

using namespace cv;
using namespace std;

#define TAG    "hand-jni-test" // 这个是自定义的LOG的标识
#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,TAG,__VA_ARGS__) // 定义LOGD类型
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG ,__VA_ARGS__) // 定义LOGI类型
#define LOGW(...) __android_log_print(ANDROID_LOG_WARN,TAG ,__VA_ARGS__) // 定义LOGW类型
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG ,__VA_ARGS__) // 定义LOGE类型
#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL,TAG ,__VA_ARGS__) // 定义LOGF类型
/*
 * Class:     com_iron_grayprocess_ImageProc
 * Method:    grayProc
 * Signature: ([III)[I
 */
JNIEXPORT jintArray JNICALL Java_com_iron_grayprocess_ImageProc_grayProc
  (JNIEnv *env, jclass obj, jintArray buf, jint w, jint h){
	jint *cbuf;
	cbuf = env->GetIntArrayElements(buf, 0);
	if(cbuf == NULL){
		return 0;
	}
	//将jintArray数组转化成Mat对象,对Mat的操作其实是对cbuf的操作
	Mat imgData(h, w, CV_8UC4, (unsigned char *)cbuf);
	uchar* ptr = imgData.ptr(0);
	for(int i = 0; i < w * h; i++){
		//计算公式：Y(亮度) = 0.299*R + 0.587*G + 0.114*B
		//对于一个int四字节，其彩色值存储方式为：BGRA
		int grayScale = (int)(ptr[4*i+2]*0.299 + ptr[4*i+1]*0.587 + ptr[4*i+0]*0.114);
		ptr[4*i+1] = grayScale;
		ptr[4*i+2] = grayScale;
		ptr[4*i+0] = grayScale;
	}

	int size = w * h;
	jintArray result = env->NewIntArray(size);
	env->SetIntArrayRegion(result, 0, size, cbuf);
	env->ReleaseIntArrayElements(buf, cbuf, 0);
	return result;
}


JNIEXPORT jintArray JNICALL Java_com_iron_grayprocess_ImageProc_procPic
  (JNIEnv *env, jclass obj, jintArray buf, jint w, jint h){
	jint *cbuf;
	cbuf = env->GetIntArrayElements(buf, 0);
	if(cbuf == NULL){
		return 0;
	}

	Mat imgData(h, w, CV_8UC4, (unsigned char *)cbuf);
	LOGD("image data get success~~");
	FingerTest finTester;

	Mat show_img = finTester.findContour(imgData);
	int size = w * h;
	int total_size = show_img.cols * show_img.rows * show_img.channels();

	int* outImage = new int[total_size];

	int nr = show_img.rows;
	int nc = show_img.cols * show_img.channels();
	for(int j = 0; j < nr; j++){
		uchar* data = show_img.ptr<uchar>(j);
		for(int i = 0 ; i < nc; i++){
			outImage[nr * j + i] = data[i];
		}
	}
	jintArray result = env->NewIntArray(total_size);
	env->SetIntArrayRegion(result, 0, total_size, outImage);
	env->ReleaseIntArrayElements(buf, cbuf, 0);
	return result;
}

